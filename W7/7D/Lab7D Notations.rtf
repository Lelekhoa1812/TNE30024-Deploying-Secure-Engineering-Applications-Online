{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs24 \cf0 \expnd0\expndtw0\kerning0
Create extension files\

\f1\b0\fs22 Create extension files for intermediate and end-user signing (cnf files)\

\f0\b\fs24 \
a. Generate Root Certificate (self-signed)
\f1\b0\fs22 \
# Generate root private key\
openssl genres -out rootCA.key 2048\
# Generate root certificate\
openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1024 -out rootCA.crt -subj "/C=AU/ST=State/O=Organization/CN=rootCA"\
\

\f0\b\fs24 b. \outl0\strokewidth0 \strokec2 Create the IntermediateA Certificate signed by Root CA
\f1\b0\fs22 \outl0\strokewidth0 \
# Generate Intermediate A private key\
openssl genrsa -out intermediateA.key 2048\
# Create a certificate signing request (CSR) for Intermediate A\
openssl req -new -key intermediateA.key -out intermediateA.csr -subj "/C=AU/ST=State/O=Organization/CN=IntermediateA"\
# Sign Intermediate A CSR with the root CA\
openssl x509 -req -in intermediateA.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out intermediateA.crt -days 500 -sha256 -extfile openssl_intermediate.cnf -extensions v3_intermediate_ca\
\

\f0\b\fs24 c. \outl0\strokewidth0 \strokec2 Create the IntermediateB Certificate signed by IntermediateA
\f1\b0\fs22 \outl0\strokewidth0 \
# Generate Intermediate B private key\
openssl genrsa -out intermediateB.key 2048\
# Create a certificate signing request (CSR) for Intermediate B\
openssl req -new -key intermediateB.key -out intermediateB.csr -subj "/C=AU/ST=State/O=Organization/CN=IntermediateB"\
# Sign Intermediate B CSR with Intermediate A\
openssl x509 -req -in intermediateB.csr -CA intermediateA.crt -CAkey intermediateA.key -CAcreateserial -out intermediateB.crt -days 500 -sha256 -extfile openssl_intermediate.cnf -extensions v3_intermediate_ca\
\

\f0\b\fs24 d. Generate Host1 Certificate (signed by IntermediateB)
\f1\b0\fs22 \
# Generate private key for host1\
openssl genrsa -out host1.key 2048\
# Create a certificate signing request (CSR) for host1\
openssl req -new -key host1.key -out host1.csr -subj "/C=AU/ST=State/O=Organization/CN=host1"\
# Sign host1 CSR with Intermediate B\
openssl x509 -req -in host1.csr -CA intermediateB.crt -CAkey intermediateB.key -CAcreateserial -out host1.crt -days 500 -sha256 -extfile openssl_enduser.cnf -extensions v3_end_user\

\f0\b\fs24 \
e. Generate Host2 Certificate (signed by IntermediateB)
\f1\b0\fs22 \
# Generate private key for host2\
openssl genrsa -out host2.key 2048\
# Create a certificate signing request (CSR) for host2\
openssl req -new -key host2.key -out host2.csr -subj "/C=AU/ST=State/O=Organization/CN=host2"\
# Sign host2 CSR with Intermediate B\
openssl x509 -req -in host2.csr -CA intermediateB.crt -CAkey intermediateB.key -CAcreateserial -out host2.crt -days 500 -sha256 -extfile openssl_enduser.cnf -extensions v3_end_user
\fs24 \outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0

\fs22 \cf0 \outl0\strokewidth0 \

\f0\b\fs24 \outl0\strokewidth0 \strokec2 Concatenate Intermediate Certificates for Chain Verification\outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0

\f1\b0\fs22 \cf0 cat intermediateB.crt intermediateA.crt > chain_intermediateB_A.crt
\fs24 \
\

\f0\b Verify the Certificate Chain
\f1\b0 \

\fs22 openssl verify -CAfile rootCA.crt -untrusted intermediateA.crt intermediateB.crt\
openssl verify -CAfile rootCA.crt -untrusted chain_intermediateB_A.crt host1.crt\
openssl verify -CAfile rootCA.crt -untrusted chain_intermediateB_A.crt host2.crt\
\

\f0\b\fs24 Create Full Chains for Host Cert\

\f1\b0\fs22 cat host1.crt intermediateB.crt intermediateA.crt rootCA.crt > fullchain_host1.crt\
cat host2.crt intermediateB.crt intermediateA.crt rootCA.crt > fullchain_host2.crt\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0

\f0\b \cf0 \outl0\strokewidth0 \strokec2 Verify the Full Chains
\f1\b0 \

\fs22 \strokec2 openssl verify -CAfile rootCA.crt -untrusted chain_intermediateB_A.crt fullchain_host1.crt\
openssl verify -CAfile rootCA.crt -untrusted chain_intermediateB_A.crt fullchain_host2.crt\
\
\pard\pardeftab720\partightenfactor0

\f0\b\fs24 \cf0 \outl0\strokewidth0 Create extension files\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs22 \cf0 Create extension files for host1 / server cert \'93
\fs24 \outl0\strokewidth0 \strokec2 openssl_host.cnf\'94\
\
\pard\pardeftab720\partightenfactor0

\f0\b \cf0 \strokec2 Recreate the server certificate (host1.crt) using the config file:
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf0 \strokec2 openssl req -new -key host1.key -out host1.csr -config openssl_host.cnf\
openssl x509 -req -in host1.csr -CA intermediateB.crt -CAkey intermediateB.key -CAcreateserial -out host1.crt -days 500 -sha256 -extfile openssl_host.cnf -extensions v3_req\

\fs22 \strokec2 cat host1.crt intermediateB.crt intermediateA.crt rootCA.crt > fullchain_host1.crt\outl0\strokewidth0 \
\

\f0\b\fs24 \outl0\strokewidth0 \strokec2 Start Server
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf0 \strokec2 python3 server.py fullchain_host1.crt host1.key rootCA.crt\
python3 client.py 127.0.0.1 fullchain_host2.crt host2.key rootCA.crt\
\outl0\strokewidth0 \
\
\pard\pardeftab720\partightenfactor0
\cf0 \
}