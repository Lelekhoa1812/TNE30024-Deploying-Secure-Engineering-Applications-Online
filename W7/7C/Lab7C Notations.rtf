{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Bold;\f1\froman\fcharset0 Times-Roman;\f2\fnil\fcharset0 LucidaGrande;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa280\partightenfactor0

\f0\b\fs28 \cf0 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 High-Level Steps:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\fs24 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Create the Certificates
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A root certificate to act as the CA.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A certificate for the server, signed by the root certificate.\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 A certificate for the client, signed by the root certificate.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Modify the Python Programs
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Update both 
\f3\fs26 client.py
\f1\fs24  and 
\f3\fs26 server.py
\f1\fs24  to print certificate details (e.g., subject information, issuer, and expiry date).\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Modify both programs to use the root certificate to validate the respective host certificates.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa240\partightenfactor0
\ls1\ilvl0
\f0\b \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Execution
\f1\b0 :\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The server will send its host certificate (
\f3\fs26 host1.crt
\f1\fs24 ) to the client, which the client will validate using the root certificate (
\f3\fs26 root.crt
\f1\fs24 ).\
\ls1\ilvl1\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f1 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The client will send its host certificate (
\f3\fs26 host2.crt
\f1\fs24 ) to the server, which the server will validate using the root certificate (
\f3\fs26 root.crt
\f1\fs24 ).\
\pard\tx566\tx1133\pardeftab720\partightenfactor0
\cf0 \
\
\
# Generate private key for the root CA\
openssl genrsa -out rootCA.key 2048\
\
# Generate self-signed root CA certificate\
openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 1024 -out rootCA.crt\
\
\
# Generate private key for the server\
openssl genrsa -out host1.key 2048\
\
# Create a certificate signing request (CSR) for the server\
openssl req -new -key host1.key -out host1.csr\
\
# Use the root certificate to sign the server's certificate\
openssl x509 -req -in host1.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out host1.crt -days 500 -sha256\
\
\
# Generate private key for the client\
openssl genrsa -out host2.key 2048\
\
# Create a certificate signing request (CSR) for the client\
openssl req -new -key host2.key -out host2.csr\
\
# Use the root certificate to sign the client's certificate\
openssl x509 -req -in host2.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out host2.crt -days 500 -sha256\
\
\
\
\
# BASH\
python3 server.py -p 1024 host1.crt host1.key -v rootCA.crt\
python3 client.py -p 1024 127.0.0.1 rootCA.crt -v host2.crt host2.key\
\
}